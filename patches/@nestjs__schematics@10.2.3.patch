diff --git a/dist/lib/resource/files/ts/__name__.controller.__specFileSuffix__.ts b/dist/lib/resource/files/ts/__name__.controller.__specFileSuffix__.ts
deleted file mode 100644
index 17e58435f19ce66f9b8d4d82ff3736c43a908712..0000000000000000000000000000000000000000
diff --git a/dist/lib/resource/files/ts/__name__.controller.ts b/dist/lib/resource/files/ts/__name__.controller.ts
deleted file mode 100644
index 8d1b7b4a65dbd8b0b6a431b5448294cb2edd14c2..0000000000000000000000000000000000000000
diff --git a/dist/lib/resource/files/ts/__name__.gateway.__specFileSuffix__.ts b/dist/lib/resource/files/ts/__name__.gateway.__specFileSuffix__.ts
deleted file mode 100644
index 8f8b5be075c514ef98eb0d9a1c680272175bb414..0000000000000000000000000000000000000000
diff --git a/dist/lib/resource/files/ts/__name__.gateway.ts b/dist/lib/resource/files/ts/__name__.gateway.ts
deleted file mode 100644
index ae88df2a7859a9d39a851cc47a9186e80f5c06c4..0000000000000000000000000000000000000000
diff --git a/dist/lib/resource/files/ts/__name__.graphql b/dist/lib/resource/files/ts/__name__.graphql
deleted file mode 100644
index ff7efe945b34c9ca6c87381983906908a2ff80a5..0000000000000000000000000000000000000000
diff --git a/dist/lib/resource/files/ts/__name__.module.ts b/dist/lib/resource/files/ts/__name__.module.ts
deleted file mode 100644
index 78a5afc4cd647621d9b5c71419d418a6bd64e21d..0000000000000000000000000000000000000000
diff --git a/dist/lib/resource/files/ts/__name__.resolver.__specFileSuffix__.ts b/dist/lib/resource/files/ts/__name__.resolver.__specFileSuffix__.ts
deleted file mode 100644
index 2ef2c6fcae7e0990141c3bc062c112c42b9cfe9e..0000000000000000000000000000000000000000
diff --git a/dist/lib/resource/files/ts/__name__.resolver.ts b/dist/lib/resource/files/ts/__name__.resolver.ts
deleted file mode 100644
index 534518e70c284c07be4297f9d4acbc55c0493b2e..0000000000000000000000000000000000000000
diff --git a/dist/lib/resource/files/ts/__name__.service.__specFileSuffix__.ts b/dist/lib/resource/files/ts/__name__.service.__specFileSuffix__.ts
deleted file mode 100644
index 2b3f38b0f51c556a070d19fff7b3f6d840470730..0000000000000000000000000000000000000000
diff --git a/dist/lib/resource/files/ts/__name__.service.ts b/dist/lib/resource/files/ts/__name__.service.ts
deleted file mode 100644
index 21943aa0987dd8dd020596bede4f801c686bff6d..0000000000000000000000000000000000000000
diff --git a/dist/lib/resource/files/ts/dto/create-__name@singular__.dto.ts b/dist/lib/resource/files/ts/dto/create-__name@singular__.dto.ts
deleted file mode 100644
index db822a4c2c6aff30b48ebbc767f2d622b68a4de9..0000000000000000000000000000000000000000
diff --git a/dist/lib/resource/files/ts/dto/create-__name@singular__.input.ts b/dist/lib/resource/files/ts/dto/create-__name@singular__.input.ts
deleted file mode 100644
index f13dd09eeca373a2c2b953783c80539d8266e946..0000000000000000000000000000000000000000
diff --git a/dist/lib/resource/files/ts/dto/update-__name@singular__.dto.ts b/dist/lib/resource/files/ts/dto/update-__name@singular__.dto.ts
deleted file mode 100644
index 4a54569c32683fddf02801dd5f3e6598ed5a3888..0000000000000000000000000000000000000000
diff --git a/dist/lib/resource/files/ts/dto/update-__name@singular__.input.ts b/dist/lib/resource/files/ts/dto/update-__name@singular__.input.ts
deleted file mode 100644
index 3d0d3fa086ea98a9ab8784652d81821868eba85c..0000000000000000000000000000000000000000
diff --git a/dist/lib/resource/files/ts/entities/__name@singular@ent__.ts b/dist/lib/resource/files/ts/entities/__name@singular@ent__.ts
deleted file mode 100644
index 362e741b403a8216353797d2235f07e2ac77719b..0000000000000000000000000000000000000000
diff --git a/dist/lib/resource/files/ts/modules/dto/create-__name__.dto.ts b/dist/lib/resource/files/ts/modules/dto/create-__name__.dto.ts
new file mode 100644
index 0000000000000000000000000000000000000000..59b6b6c9d48e88f2ef96d9aa2aaadda83934d841
--- /dev/null
+++ b/dist/lib/resource/files/ts/modules/dto/create-__name__.dto.ts
@@ -0,0 +1 @@
+export class Create<%= classify(name) %>Dto {}
diff --git a/dist/lib/resource/files/ts/modules/dto/filter-__name__.dto.ts b/dist/lib/resource/files/ts/modules/dto/filter-__name__.dto.ts
new file mode 100644
index 0000000000000000000000000000000000000000..58119ee1f28d060573ed29eddcb359fcd783c4a5
--- /dev/null
+++ b/dist/lib/resource/files/ts/modules/dto/filter-__name__.dto.ts
@@ -0,0 +1,3 @@
+import { BaseFilterDto } from '@lib/base/dto';
+
+export class Filter<%= classify(name) %>Dto extends BaseFilterDto {}
diff --git a/dist/lib/resource/files/ts/modules/dto/update-__name__.dto.ts b/dist/lib/resource/files/ts/modules/dto/update-__name__.dto.ts
new file mode 100644
index 0000000000000000000000000000000000000000..be6c22c7bb71e419e1ab14ea2ead7892dd6c3590
--- /dev/null
+++ b/dist/lib/resource/files/ts/modules/dto/update-__name__.dto.ts
@@ -0,0 +1,4 @@
+import { PartialType } from '@nestjs/swagger';
+import { Create<%= classify(name) %>Dto } from './create-<%= name %>.dto';
+
+export class Update<%= classify(name) %>Dto extends PartialType(Create<%= classify(name) %>Dto) {}
diff --git a/dist/lib/resource/files/ts/modules/entities/__name__.entity.abstract.ts b/dist/lib/resource/files/ts/modules/entities/__name__.entity.abstract.ts
new file mode 100644
index 0000000000000000000000000000000000000000..2a88e31ab897546e31b42641970409869fbb6384
--- /dev/null
+++ b/dist/lib/resource/files/ts/modules/entities/__name__.entity.abstract.ts
@@ -0,0 +1,3 @@
+import { BaseEntity } from '@lib/base/entities';
+
+export abstract class <%= classify(name) %>Entity extends BaseEntity {}
diff --git a/dist/lib/resource/files/ts/modules/entities/__name__.typeorm.entity.ts b/dist/lib/resource/files/ts/modules/entities/__name__.typeorm.entity.ts
new file mode 100644
index 0000000000000000000000000000000000000000..428b899c8dd5dc33cb90ab5fa4a4b37e65b9bd4e
--- /dev/null
+++ b/dist/lib/resource/files/ts/modules/entities/__name__.typeorm.entity.ts
@@ -0,0 +1,6 @@
+import { <%= classify(name) %>Entity } from './<%= name %>.entity.abstract';
+import { BaseTypeormEntity } from '@lib/base/entities';
+import { Entity } from 'typeorm';
+
+@Entity('<%= name %>s')
+export class <%= classify(name) %>TypeormEntity extends BaseTypeormEntity implements <%= classify(name) %>Entity {}
diff --git a/dist/lib/resource/files/ts/modules/index.ts b/dist/lib/resource/files/ts/modules/index.ts
new file mode 100644
index 0000000000000000000000000000000000000000..440b099bc5d3ed0851b123c59dadbb4b976e8d0f
--- /dev/null
+++ b/dist/lib/resource/files/ts/modules/index.ts
@@ -0,0 +1,9 @@
+export * from './dto/create-<%= name %>.dto';
+export * from './dto/filter-<%= name %>.dto';
+export * from './dto/update-<%= name %>.dto';
+
+export * from './entities/<%= name %>.typeorm.entity';
+export * from './entities/<%= name %>.entity.abstract';
+
+export * from './repositories/<%= name %>.typeorm.repository';
+export * from './repositories/<%= name %>.repository.abstract';
diff --git a/dist/lib/resource/files/ts/modules/repositories/__name__.repository.abstract.ts b/dist/lib/resource/files/ts/modules/repositories/__name__.repository.abstract.ts
new file mode 100644
index 0000000000000000000000000000000000000000..4453ac409d76386b00d60c778e2a6f9847d76161
--- /dev/null
+++ b/dist/lib/resource/files/ts/modules/repositories/__name__.repository.abstract.ts
@@ -0,0 +1,4 @@
+import { BaseRepository } from '@lib/base/repositories';
+import { <%= classify(name) %>Entity } from '../entities/<%= name %>.entity.abstract';
+
+export abstract class <%= classify(name) %>Repository extends BaseRepository<<%= classify(name) %>Entity> {}
diff --git a/dist/lib/resource/files/ts/modules/repositories/__name__.typeorm.repository.ts b/dist/lib/resource/files/ts/modules/repositories/__name__.typeorm.repository.ts
new file mode 100644
index 0000000000000000000000000000000000000000..b641533b35c0466d344ad272c4e00fe987453577
--- /dev/null
+++ b/dist/lib/resource/files/ts/modules/repositories/__name__.typeorm.repository.ts
@@ -0,0 +1,9 @@
+import { <%= classify(name) %>Repository } from './<%= name %>.repository.abstract';
+import { BaseTypeormRepository } from '@lib/base/repositories';
+import { Repository } from '@lib/core/typeorm';
+import { <%= classify(name) %>TypeormEntity } from '../entities/<%= name %>.typeorm.entity';
+
+@Repository(<%= classify(name) %>TypeormEntity)
+export class <%= classify(name) %>TypeormRepository
+	extends BaseTypeormRepository<<%= classify(name) %>TypeormEntity>
+	implements <%= classify(name) %>Repository {}
diff --git a/dist/lib/resource/files/ts/transport/__name__.controller.ts b/dist/lib/resource/files/ts/transport/__name__.controller.ts
new file mode 100644
index 0000000000000000000000000000000000000000..e5929f32b4b4040a54a883dca693345fc1d80952
--- /dev/null
+++ b/dist/lib/resource/files/ts/transport/__name__.controller.ts
@@ -0,0 +1,80 @@
+import { Body, Controller, Delete, Get, Param, Patch, Post, Query } from '@nestjs/common';
+import { Create<%= classify(name) %>Dto, Filter<%= classify(name) %>Dto, Update<%= classify(name) %>Dto, <%= classify(name) %>Entity } from '@lib/modules/<%= name %>';
+import { Create<%= classify(name) %>UseCase } from './usecases/create-<%= name %>.usecase';
+import { Update<%= classify(name) %>UseCase } from './usecases/update-<%= name %>.usecase';
+import { Delete<%= classify(name) %>UseCase } from './usecases/delete-<%= name %>.usecase';
+import { Find<%= classify(name) %>UseCase } from './usecases/find-<%= name %>.usecase';
+import { Detail<%= classify(name) %>UseCase } from './usecases/detail-<%= name %>.usecase';
+import {
+	SwaggerCreatedResponse,
+	SwaggerListResponse,
+	SwaggerOkResponse
+} from '@lib/common/decorators';
+import { PaginationResponse } from '@lib/base/dto';
+
+@Controller('<%= name %>s')
+export class <%= classify(name) %>Controller {
+	constructor(
+		private readonly create<%= classify(name) %>UseCase: Create<%= classify(name) %>UseCase,
+		private readonly update<%= classify(name) %>UseCase: Update<%= classify(name) %>UseCase,
+		private readonly delete<%= classify(name) %>UseCase: Delete<%= classify(name) %>UseCase,
+		private readonly find<%= classify(name) %>UseCase: Find<%= classify(name) %>UseCase,
+		private readonly detail<%= classify(name) %>UseCase: Detail<%= classify(name) %>UseCase
+	) {}
+
+	/**
+	 * @path POST /api/v1/<%= name %>s
+	 * @param data {Create<%= classify(name) %>Dto}
+	 * @returns {Promise<<%= classify(name) %>Entity>}
+	 */
+	@Post()
+	@SwaggerCreatedResponse({ summary: 'Create <%= name %>', type: <%= classify(name) %>Entity })
+	create(@Body() data: Create<%= classify(name) %>Dto): Promise<<%= classify(name) %>Entity> {
+		return this.create<%= classify(name) %>UseCase.execute(data);
+	}
+
+	/**
+	 * @path GET /api/v1/<%= name %>s/:id
+	 * @param id {string}
+	 * @param data {Update<%= classify(name) %>Dto}
+	 * @returns {Promise<<%= classify(name) %>Entity>}
+	 */
+	@Patch(':id')
+	@SwaggerOkResponse({ summary: 'Update <%= name %>', type: <%= classify(name) %>Entity })
+	update(@Param('id') id: string, @Body() data: Update<%= classify(name) %>Dto): Promise<<%= classify(name) %>Entity> {
+		return this.update<%= classify(name) %>UseCase.execute(id, data);
+	}
+
+	/**
+	 * @path DELETE /api/v1/<%= name %>s/:id
+	 * @param id {string}
+	 * @returns {Promise<<%= classify(name) %>Entity>}
+	 */
+	@Delete(':id')
+	@SwaggerOkResponse({ summary: 'Remove <%= name %>', type: <%= classify(name) %>Entity })
+	remove(@Param('id') id: string): Promise<<%= classify(name) %>Entity> {
+		return this.delete<%= classify(name) %>UseCase.execute(id);
+	}
+
+	/**
+	 * @path GET /api/v1/<%= name %>s
+	 * @param filter {Filter<%= classify(name) %>Dto}
+	 * @returns {Promise<PaginationResponse<<%= classify(name) %>Entity>>}
+	 */
+	@Get()
+	@SwaggerListResponse({ summary: 'List <%= name %>', type: <%= classify(name) %>Entity })
+	findAll(@Query() filter: Filter<%= classify(name) %>Dto): Promise<PaginationResponse<<%= classify(name) %>Entity>> {
+		return this.find<%= classify(name) %>UseCase.query(filter);
+	}
+
+	/**
+	 * @path GET /api/v1/<%= name %>s/:id
+	 * @param id {string}
+	 * @returns {Promise<<%= classify(name) %>Entity>}
+	 */
+	@Get(':id')
+	@SwaggerOkResponse({ summary: 'Detail <%= name %>', type: <%= classify(name) %>Entity })
+	findOne(@Param('id') id: string): Promise<<%= classify(name) %>Entity> {
+		return this.detail<%= classify(name) %>UseCase.query(id);
+	}
+}
diff --git a/dist/lib/resource/files/ts/transport/__name__.module.ts b/dist/lib/resource/files/ts/transport/__name__.module.ts
new file mode 100644
index 0000000000000000000000000000000000000000..cd0359ae1c906dc77f7a140737179afc95a9c284
--- /dev/null
+++ b/dist/lib/resource/files/ts/transport/__name__.module.ts
@@ -0,0 +1,19 @@
+import { Module } from '@nestjs/common';
+import { <%= classify(name) %>Controller } from './<%= name %>.controller';
+import { Create<%= classify(name) %>UseCase } from './usecases/create-<%= name %>.usecase';
+import { Update<%= classify(name) %>UseCase } from './usecases/update-<%= name %>.usecase';
+import { Delete<%= classify(name) %>UseCase } from './usecases/delete-<%= name %>.usecase';
+import { Find<%= classify(name) %>UseCase } from './usecases/find-<%= name %>.usecase';
+import { Detail<%= classify(name) %>UseCase } from './usecases/detail-<%= name %>.usecase';
+
+@Module({
+	controllers: [<%= classify(name) %>Controller],
+	providers: [
+		Create<%= classify(name) %>UseCase,
+		Update<%= classify(name) %>UseCase,
+		Delete<%= classify(name) %>UseCase,
+		Find<%= classify(name) %>UseCase,
+		Detail<%= classify(name) %>UseCase
+	]
+})
+export class <%= classify(name) %>Module {}
diff --git a/dist/lib/resource/files/ts/transport/usecases/create-__name__.usecase.ts b/dist/lib/resource/files/ts/transport/usecases/create-__name__.usecase.ts
new file mode 100644
index 0000000000000000000000000000000000000000..7ec8be161f56c3f1371895b0439cbd7a0efc802f
--- /dev/null
+++ b/dist/lib/resource/files/ts/transport/usecases/create-__name__.usecase.ts
@@ -0,0 +1,14 @@
+import { Injectable } from '@nestjs/common';
+import { Create<%= classify(name) %>Dto, <%= classify(name) %>Entity, <%= classify(name) %>Repository } from '@lib/modules/<%= name %>';
+import { ExecuteHandler } from '@lib/common/abstracts';
+
+@Injectable()
+export class Create<%= classify(name) %>UseCase extends ExecuteHandler<<%= classify(name) %>Entity> {
+	constructor(private readonly <%= name %>Repository: <%= classify(name) %>Repository) {
+		super();
+	}
+
+	async execute(data: Create<%= classify(name) %>Dto): Promise<<%= classify(name) %>Entity> {
+		return this.<%= name %>Repository.create({ data });
+	}
+}
diff --git a/dist/lib/resource/files/ts/transport/usecases/delete-__name__.usecase.ts b/dist/lib/resource/files/ts/transport/usecases/delete-__name__.usecase.ts
new file mode 100644
index 0000000000000000000000000000000000000000..92e832de803e4f2623e0a41c46bee9cc1f236c56
--- /dev/null
+++ b/dist/lib/resource/files/ts/transport/usecases/delete-__name__.usecase.ts
@@ -0,0 +1,14 @@
+import { Injectable } from '@nestjs/common';
+import { <%= classify(name) %>Entity, <%= classify(name) %>Repository } from '@lib/modules/<%= name %>';
+import { ExecuteHandler } from '@lib/common/abstracts';
+
+@Injectable()
+export class Delete<%= classify(name) %>UseCase extends ExecuteHandler<<%= classify(name) %>Entity> {
+	constructor(private readonly <%= name %>Repository: <%= classify(name) %>Repository) {
+		super();
+	}
+
+	async execute(id: string): Promise<<%= classify(name) %>Entity> {
+		return this.<%= name %>Repository.softDeleteById({ id });
+	}
+}
diff --git a/dist/lib/resource/files/ts/transport/usecases/detail-__name__.usecase.ts b/dist/lib/resource/files/ts/transport/usecases/detail-__name__.usecase.ts
new file mode 100644
index 0000000000000000000000000000000000000000..5f9648face777de6c1266eedc8ef5f859dde28da
--- /dev/null
+++ b/dist/lib/resource/files/ts/transport/usecases/detail-__name__.usecase.ts
@@ -0,0 +1,14 @@
+import { Injectable } from '@nestjs/common';
+import { <%= classify(name) %>Entity, <%= classify(name) %>Repository } from '@lib/modules/<%= name %>';
+import { QueryHandler } from '@lib/common/abstracts';
+
+@Injectable()
+export class Detail<%= classify(name) %>UseCase extends QueryHandler<<%= classify(name) %>Entity> {
+	constructor(private readonly <%= name %>Repository: <%= classify(name) %>Repository) {
+		super();
+	}
+
+	async query(id: string): Promise<<%= classify(name) %>Entity> {
+		return this.<%= name %>Repository.findByIdOrThrow({ id });
+	}
+}
diff --git a/dist/lib/resource/files/ts/transport/usecases/find-__name__.usecase.ts b/dist/lib/resource/files/ts/transport/usecases/find-__name__.usecase.ts
new file mode 100644
index 0000000000000000000000000000000000000000..7753c48799a9aec7bb4809fec70e3cf79e470d69
--- /dev/null
+++ b/dist/lib/resource/files/ts/transport/usecases/find-__name__.usecase.ts
@@ -0,0 +1,15 @@
+import { Injectable } from '@nestjs/common';
+import { Filter<%= classify(name) %>Dto, <%= classify(name) %>Entity, <%= classify(name) %>Repository } from '@lib/modules/<%= name %>';
+import { PaginationResponse } from '@lib/base/dto';
+import { QueryHandler } from '@lib/common/abstracts';
+
+@Injectable()
+export class Find<%= classify(name) %>UseCase extends QueryHandler<PaginationResponse<<%= classify(name) %>Entity>> {
+	constructor(private readonly <%= name %>Repository: <%= classify(name) %>Repository) {
+		super();
+	}
+
+	async query(filter: Filter<%= classify(name) %>Dto): Promise<PaginationResponse<<%= classify(name) %>Entity>> {
+		return this.<%= name %>Repository.findPaginated(filter);
+	}
+}
diff --git a/dist/lib/resource/files/ts/transport/usecases/update-__name__.usecase.ts b/dist/lib/resource/files/ts/transport/usecases/update-__name__.usecase.ts
new file mode 100644
index 0000000000000000000000000000000000000000..77400f8905e002583626b9f3784c91c5a7a2c6a7
--- /dev/null
+++ b/dist/lib/resource/files/ts/transport/usecases/update-__name__.usecase.ts
@@ -0,0 +1,14 @@
+import { Injectable } from '@nestjs/common';
+import { Update<%= classify(name) %>Dto, <%= classify(name) %>Entity, <%= classify(name) %>Repository } from '@lib/modules/<%= name %>';
+import { ExecuteHandler } from '@lib/common/abstracts';
+
+@Injectable()
+export class Update<%= classify(name) %>UseCase extends ExecuteHandler<<%= classify(name) %>Entity> {
+	constructor(private readonly <%= name %>Repository: <%= classify(name) %>Repository) {
+		super();
+	}
+
+	async execute(id: string, data: Update<%= classify(name) %>Dto): Promise<<%= classify(name) %>Entity> {
+		return this.<%= name %>Repository.updateById({ id, data });
+	}
+}
diff --git a/dist/lib/resource/resource.factory.js b/dist/lib/resource/resource.factory.js
index ad2dc73e633741883d303dabd95e6462de5f99d5..f1b0a6167bbd00bd477dc7a2e3f5bb4db9c991f7 100644
--- a/dist/lib/resource/resource.factory.js
+++ b/dist/lib/resource/resource.factory.js
@@ -43,12 +43,11 @@ function transform(options) {
     return target;
 }
 function generate(options) {
-    return (context) => (0, schematics_1.apply)((0, schematics_1.url)((0, core_1.join)('./files', options.language)), [
+    return (context) => (0, schematics_1.apply)((0, schematics_1.url)((0, core_1.join)('./files', options.language, options.transport ? 'transport' : 'modules')), [
         (0, schematics_1.filter)((path) => {
             if (path.endsWith('.dto.ts')) {
                 return (options.type !== 'graphql-code-first' &&
-                    options.type !== 'graphql-schema-first' &&
-                    options.crud);
+                    options.type !== 'graphql-schema-first');
             }
             if (path.endsWith('.input.ts')) {
                 return ((options.type === 'graphql-code-first' ||
diff --git a/dist/lib/resource/schema.json b/dist/lib/resource/schema.json
index 6251b45798c8ceaaedc94e38513b03d60f87130a..bf879a902f0e2a12d3e1c0dff78e23adf8b8375e 100644
--- a/dist/lib/resource/schema.json
+++ b/dist/lib/resource/schema.json
@@ -81,12 +81,11 @@
       "description": "Flag to skip the module import.",
       "default": false
     },
-    "crud": {
+    "transport": {
       "type": "boolean",
-      "description": "When true, CRUD entry points are generated.",
-      "default": true,
+      "default": false,
       "x-prompt": {
-        "message": "Would you like to generate CRUD entry points?",
+        "message": "This is resource of transport?",
         "type": "confirmation"
       }
     }
